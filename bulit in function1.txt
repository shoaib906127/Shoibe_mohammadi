abs: return the absult valume of argument

all:Return True if bool(x) is True for all values x in the iterable.If the iterable is empty, return True.

any: Return True if bool(x) is True for any x in the iterable.If the iterable is empty, return False.

ascii: only representation of an object.

bin: Return the binary representation of an integer

bool: Returns True when the argument x is true, False otherwise.

callable: Return whether the object is callable.

chr : Return a Unicode string of one character with ordinal

classmethod: convert a function to be a class method.

compile: the source code may represent a Python module, statement or expression.

complex: create a complex number from a real part and an optional imaginary part.

delattr: deletes the named attribute from the given object

dict: creat new empty dictionary

dir: show the attribute of object

divmod: Return the tuple (x//y, x%y). Invariant: div*y + mod == x.

eval: evaluate the given source in the context of globals and locals.

exec: do the same work with eval bulit in function

filter: Return an iterator yielding those items of iterable for which function(item)


is true. If function is None, return the items that are true.

float: Convert a string or number to a floating point number, if possible. 

fromat: Return type(value).__format__(value, format_spec)

frozenset:Build an immutable unordered collection of unique elements.

getattr: Get a named attribute from an object.

global: return the dictionary containing the current scope's global variables.

hasattr: return whether the object has an attribute with the given name.

hash: return the hash value for the given object.

hex: Return the hexadecimal representation of an integer

id: return an identity of an objcet

input: read a string from a standard input.

int: convert number and string to integar.

isinstance: return whether an object is an instance of a class or of a subclass thereof.

issubclass: Return whether 'cls' is derived from another class or is the same class.

iter: return a dictionary containing the current scope's local variables.

len: return the number of items in a container.

list: no argument is given, the constructor creates a new empty list.

The argument must be an iterable if specified.

locals: return a dictionary containing the current scope's local variable

map: make an iterator that computes the function using arguments from

each of the iterables. Stops when the shortest iterable is exhausted

max: with a single iterable argument, return its biggest item.

memoryview: create a new memoryview object which references the given object.

next: return the next item from the iterator.

min: with a single iterable argument, return its smallest item. 

object: the base class of the class hierarch

oct:return the octal representation of an integer

open: Open file and return a stream

ord: return the Unicode code point for a one-character string.

pow: show the power of a number:

print: print everything 

property: unction to be used for getting an attribute value fset
range: return an object that produces a sequence of integers from start to stop


repr: return an object that produces a sequence of integers from start 

reversed: return a reverse iterator over the values of the given sequence

round: round a number to a given precision in decimal digits.

set: build an unordered collection of unique elements.

setattr: sets the named attribute on the given object to the specified value

slice: create a slice object. 

sorted: return a new list containing all items from the iterable in ascending order.

str: return a new list containing all items from the iterable in ascending order.

sum: return the sum of tow number or tow string.

super: used to take of inhertance

tuple: If no argument is given, the constructor returns an empty tuple.

type: show the type of everything

vars: return the __dict__ attribute

zip: the zip object yields n-length tuples.

__import__: uset to import a module.

